import React, { useState, useEffect } from 'react';
import { Card, Spinner, Alert, Row, Col } from 'react-bootstrap';

const WeatherWidget = ({ location }) => {
  const [weather, setWeather] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // D·ªØ li·ªáu th·ªùi ti·∫øt gi·∫£ l·∫≠p cho c√°c ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn
  const mockWeatherData = {
    'ƒë√† l·∫°t': {
      temp: 22,
      humidity: 70,
      description: 'M√°t m·∫ª, c√≥ s∆∞∆°ng m√π',
      icon: 'üå•Ô∏è',
      forecast: [
        { day: 'H√¥m nay', temp: 22, icon: 'üå•Ô∏è' },
        { day: 'Ng√†y mai', temp: 23, icon: '‚òÄÔ∏è' },
        { day: 'Ng√†y kia', temp: 21, icon: 'üå¶Ô∏è' }
      ]
    },
    'h·∫° long': {
      temp: 29,
      humidity: 75,
      description: 'N·∫Øng nh·∫π, c√≥ m√¢y',
      icon: '‚õÖ',
      forecast: [
        { day: 'H√¥m nay', temp: 29, icon: '‚õÖ' },
        { day: 'Ng√†y mai', temp: 30, icon: '‚òÄÔ∏è' },
        { day: 'Ng√†y kia', temp: 28, icon: 'üå¶Ô∏è' }
      ]
    },
    'sapa': {
      temp: 18,
      humidity: 85,
      description: 'M√°t m·∫ª, c√≥ s∆∞∆°ng m√π',
      icon: 'üå´Ô∏è',
      forecast: [
        { day: 'H√¥m nay', temp: 18, icon: 'üå´Ô∏è' },
        { day: 'Ng√†y mai', temp: 20, icon: '‚õÖ' },
        { day: 'Ng√†y kia', temp: 19, icon: 'üå•Ô∏è' }
      ]
    },
    'ph√∫ qu·ªëc': {
      temp: 32,
      humidity: 70,
      description: 'N·∫Øng, √≠t m√¢y',
      icon: '‚òÄÔ∏è',
      forecast: [
        { day: 'H√¥m nay', temp: 32, icon: '‚òÄÔ∏è' },
        { day: 'Ng√†y mai', temp: 31, icon: '‚õÖ' },
        { day: 'Ng√†y kia', temp: 32, icon: '‚òÄÔ∏è' }
      ]
    },
    'h√† n·ªôi': {
      temp: 30,
      humidity: 80,
      description: 'N√≥ng ·∫©m, c√≥ m√¢y',
      icon: '‚õÖ',
      forecast: [
        { day: 'H√¥m nay', temp: 30, icon: '‚õÖ' },
        { day: 'Ng√†y mai', temp: 32, icon: '‚òÄÔ∏è' },
        { day: 'Ng√†y kia', temp: 29, icon: 'üå¶Ô∏è' }
      ]
    },
    'h·ªì ch√≠ minh': {
      temp: 33,
      humidity: 75,
      description: 'N√≥ng, c√≥ th·ªÉ c√≥ m∆∞a r√†o',
      icon: 'üå¶Ô∏è',
      forecast: [
        { day: 'H√¥m nay', temp: 33, icon: 'üå¶Ô∏è' },
        { day: 'Ng√†y mai', temp: 32, icon: '‚õàÔ∏è' },
        { day: 'Ng√†y kia', temp: 31, icon: '‚õÖ' }
      ]
    },
    'ƒë√† n·∫µng': {
      temp: 31,
      humidity: 70,
      description: 'N·∫Øng, √≠t m√¢y',
      icon: '‚òÄÔ∏è',
      forecast: [
        { day: 'H√¥m nay', temp: 31, icon: '‚òÄÔ∏è' },
        { day: 'Ng√†y mai', temp: 30, icon: '‚õÖ' },
        { day: 'Ng√†y kia', temp: 32, icon: '‚òÄÔ∏è' }
      ]
    },
    'hu·∫ø': {
      temp: 30,
      humidity: 75,
      description: 'N·∫Øng, c√≥ m√¢y',
      icon: '‚õÖ',
      forecast: [
        { day: 'H√¥m nay', temp: 30, icon: '‚õÖ' },
        { day: 'Ng√†y mai', temp: 29, icon: 'üå¶Ô∏è' },
        { day: 'Ng√†y kia', temp: 31, icon: '‚òÄÔ∏è' }
      ]
    },
    'nha trang': {
      temp: 31,
      humidity: 65,
      description: 'N·∫Øng ƒë·∫πp, √≠t m√¢y',
      icon: '‚òÄÔ∏è',
      forecast: [
        { day: 'H√¥m nay', temp: 31, icon: '‚òÄÔ∏è' },
        { day: 'Ng√†y mai', temp: 32, icon: '‚òÄÔ∏è' },
        { day: 'Ng√†y kia', temp: 30, icon: '‚õÖ' }
      ]
    },
    'default': {
      temp: 28,
      humidity: 70,
      description: 'Th·ªùi ti·∫øt ·ªïn ƒë·ªãnh',
      icon: '‚õÖ',
      forecast: [
        { day: 'H√¥m nay', temp: 28, icon: '‚õÖ' },
        { day: 'Ng√†y mai', temp: 29, icon: '‚òÄÔ∏è' },
        { day: 'Ng√†y kia', temp: 28, icon: '‚õÖ' }
      ]
    }
  };

  useEffect(() => {
    // Gi·∫£ l·∫≠p vi·ªác g·ªçi API th·ªùi ti·∫øt
    setLoading(true);
    setTimeout(() => {
      try {
        if (!location) {
          setWeather(mockWeatherData.default);
        } else {
          // T√¨m th·ªùi ti·∫øt cho ƒë·ªãa ƒëi·ªÉm
          const locationKey = Object.keys(mockWeatherData).find(key => 
            location.toLowerCase().includes(key)
          );
          
          setWeather(locationKey ? mockWeatherData[locationKey] : mockWeatherData.default);
        }
        setLoading(false);
      } catch (err) {
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.');
        setLoading(false);
      }
    }, 1000);
  }, [location]);

  if (loading) {
    return (
      <Card className="mb-4 shadow-sm">
        <Card.Body className="text-center py-4">
          <Spinner animation="border" variant="primary" />
          <p className="mt-2 mb-0">ƒêang t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt...</p>
        </Card.Body>
      </Card>
    );
  }

  if (error) {
    return (
      <Alert variant="warning" className="mb-4">
        <Alert.Heading>‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i th·ªùi ti·∫øt</Alert.Heading>
        <p>{error}</p>
      </Alert>
    );
  }

  return (
    <Card className="mb-4 shadow-sm">
      <Card.Header>
        <h5 className="mb-0">üå§Ô∏è Th·ªùi ti·∫øt t·∫°i {location || 'Vi·ªát Nam'}</h5>
      </Card.Header>
      <Card.Body>
        <div className="d-flex align-items-center mb-3">
          <div style={{ fontSize: '3rem', marginRight: '1rem' }}>
            {weather.icon}
          </div>
          <div>
            <h2 className="mb-0">{weather.temp}¬∞C</h2>
            <p className="mb-0">{weather.description}</p>
            <small>ƒê·ªô ·∫©m: {weather.humidity}%</small>
          </div>
        </div>
        
        <hr />
        
        <h6>D·ª± b√°o 3 ng√†y t·ªõi:</h6>
        <Row>
          {weather.forecast.map((day, index) => (
            <Col key={index} className="text-center">
              <div className="p-2">
                <div>{day.day}</div>
                <div style={{ fontSize: '1.5rem' }}>{day.icon}</div>
                <div>{day.temp}¬∞C</div>
              </div>
            </Col>
          ))}
        </Row>
      </Card.Body>
    </Card>
  );
};

export default WeatherWidget; 