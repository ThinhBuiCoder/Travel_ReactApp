import React, { useState } from 'react';
import { Card, ListGroup, Accordion, Badge } from 'react-bootstrap';

const TourItinerary = ({ location, duration = 3 }) => {
  // D·ªØ li·ªáu l·ªãch tr√¨nh gi·∫£ l·∫≠p cho c√°c ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn
  const mockItineraries = {
    'ƒë√† l·∫°t': [
      {
        day: 1,
        title: 'Kh√°m ph√° trung t√¢m ƒê√† L·∫°t',
        activities: [
          { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
          { time: '08:30', description: 'Tham quan Qu·∫£ng tr∆∞·ªùng L√¢m Vi√™n v√† H·ªì Xu√¢n H∆∞∆°ng' },
          { time: '10:30', description: 'Gh√© thƒÉm Nh√† th·ªù Con G√†' },
          { time: '12:00', description: 'ƒÇn tr∆∞a v·ªõi ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng' },
          { time: '14:00', description: 'Tham quan Dinh B·∫£o ƒê·∫°i' },
          { time: '16:00', description: 'Th∆∞·ªüng th·ª©c c√† ph√™ t·∫°i C√† ph√™ T√∫i M∆° To' },
          { time: '18:00', description: 'ƒÇn t·ªëi t·∫°i ch·ª£ ƒë√™m ƒê√† L·∫°t' },
        ]
      },
      {
        day: 2,
        title: 'Kh√°m ph√° v√πng ngo·∫°i √¥',
        activities: [
          { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
          { time: '08:30', description: 'Tham quan Thung l≈©ng T√¨nh Y√™u' },
          { time: '10:30', description: 'Kh√°m ph√° L√†ng hoa V·∫°n Th√†nh' },
          { time: '12:00', description: 'ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng' },
          { time: '14:00', description: 'Tham quan Thi·ªÅn vi·ªán Tr√∫c L√¢m' },
          { time: '16:00', description: 'Tham quan H·ªì Tuy·ªÅn L√¢m' },
          { time: '18:00', description: 'ƒÇn t·ªëi t·∫°i nh√† h√†ng ƒë·∫∑c s·∫£n' },
        ]
      },
      {
        day: 3,
        title: 'Kh√°m ph√° ƒëi·ªÉm ƒë·∫øn n·ªïi ti·∫øng',
        activities: [
          { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
          { time: '08:30', description: 'Tham quan Th√°c Datanla' },
          { time: '11:00', description: 'Tham quan V∆∞·ªùn hoa th√†nh ph·ªë' },
          { time: '12:30', description: 'ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng' },
          { time: '14:00', description: 'Tham quan Ga ƒê√† L·∫°t c·ªï k√≠nh' },
          { time: '16:00', description: 'Mua s·∫Øm ƒë·∫∑c s·∫£n v√† qu√† l∆∞u ni·ªám' },
          { time: '18:00', description: 'ƒÇn t·ªëi v√† k·∫øt th√∫c chuy·∫øn tham quan' },
        ]
      }
    ],
    'h·∫° long': [
      {
        day: 1,
        title: 'Kh√°m ph√° V·ªãnh H·∫° Long',
        activities: [
          { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
          { time: '08:30', description: 'L√™n t√†u du l·ªãch t·∫°i c·∫£ng' },
          { time: '10:30', description: 'Tham quan hang S·ª≠ng S·ªët' },
          { time: '12:00', description: 'ƒÇn tr∆∞a tr√™n t√†u v·ªõi h·∫£i s·∫£n t∆∞∆°i ngon' },
          { time: '14:00', description: 'Ch√®o thuy·ªÅn kayak kh√°m ph√° v·ªãnh' },
          { time: '16:00', description: 'Tham quan l√†ng ch√†i C·ª≠a V·∫°n' },
          { time: '18:00', description: 'ƒÇn t·ªëi tr√™n t√†u v√† ngh·ªâ ƒë√™m' },
        ]
      },
      {
        day: 2,
        title: 'Tham quan ƒë·∫£o Titop',
        activities: [
          { time: '06:00', description: 'Ng·∫Øm b√¨nh minh tr√™n v·ªãnh' },
          { time: '07:00', description: 'ƒÇn s√°ng tr√™n t√†u' },
          { time: '08:30', description: 'L√™n ƒë·∫£o Titop v√† t·∫Øm bi·ªÉn' },
          { time: '10:30', description: 'Leo n√∫i ng·∫Øm to√†n c·∫£nh v·ªãnh H·∫° Long' },
          { time: '12:00', description: 'ƒÇn tr∆∞a tr√™n t√†u' },
          { time: '14:00', description: 'Tham quan hang Lu·ªìn' },
          { time: '16:00', description: 'Quay v·ªÅ c·∫£ng' },
          { time: '18:00', description: 'ƒÇn t·ªëi t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng' },
        ]
      },
      {
        day: 3,
        title: 'Kh√°m ph√° th√†nh ph·ªë H·∫° Long',
        activities: [
          { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
          { time: '08:30', description: 'Tham quan c√¥ng vi√™n Sun World H·∫° Long' },
          { time: '11:00', description: 'Tr·∫£i nghi·ªám c√°p treo N·ªØ Ho√†ng' },
          { time: '12:30', description: 'ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng' },
          { time: '14:00', description: 'Tham quan b·∫£o t√†ng Qu·∫£ng Ninh' },
          { time: '16:00', description: 'Mua s·∫Øm ƒë·∫∑c s·∫£n v√† qu√† l∆∞u ni·ªám' },
          { time: '18:00', description: 'ƒÇn t·ªëi v√† k·∫øt th√∫c chuy·∫øn tham quan' },
        ]
      }
    ],
    'default': [
      {
        day: 1,
        title: 'Ng√†y kh√°m ph√°',
        activities: [
          { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
          { time: '08:30', description: 'Tham quan c√°c ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng' },
          { time: '12:00', description: 'ƒÇn tr∆∞a v·ªõi ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng' },
          { time: '14:00', description: 'Ti·∫øp t·ª•c tham quan' },
          { time: '18:00', description: 'ƒÇn t·ªëi v√† ngh·ªâ ng∆°i' },
        ]
      },
      {
        day: 2,
        title: 'Ng√†y tr·∫£i nghi·ªám',
        activities: [
          { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
          { time: '08:30', description: 'Tr·∫£i nghi·ªám vƒÉn h√≥a ƒë·ªãa ph∆∞∆°ng' },
          { time: '12:00', description: 'ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng' },
          { time: '14:00', description: 'Tham gia c√°c ho·∫°t ƒë·ªông gi·∫£i tr√≠' },
          { time: '18:00', description: 'ƒÇn t·ªëi v·ªõi ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng' },
        ]
      },
      {
        day: 3,
        title: 'Ng√†y mua s·∫Øm v√† chia tay',
        activities: [
          { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
          { time: '09:00', description: 'Tham quan c√°c khu ch·ª£ ƒë·ªãa ph∆∞∆°ng' },
          { time: '12:00', description: 'ƒÇn tr∆∞a t·∫°i nh√† h√†ng' },
          { time: '14:00', description: 'Mua s·∫Øm ƒë·∫∑c s·∫£n v√† qu√† l∆∞u ni·ªám' },
          { time: '17:00', description: 'ƒÇn t·ªëi v√† k·∫øt th√∫c chuy·∫øn tham quan' },
        ]
      }
    ]
  };

  // L·∫•y l·ªãch tr√¨nh ph√π h·ª£p v·ªõi ƒë·ªãa ƒëi·ªÉm
  const getItinerary = () => {
    if (!location) return mockItineraries.default;
    
    const locationLower = location.toLowerCase();
    
    // T√¨m ƒë·ªãa ƒëi·ªÉm kh·ªõp v·ªõi t·ª´ kh√≥a
    const matchedLocation = Object.keys(mockItineraries).find(key => 
      locationLower.includes(key)
    );
    
    return matchedLocation ? mockItineraries[matchedLocation] : mockItineraries.default;
  };

  // ƒêi·ªÅu ch·ªânh s·ªë ng√†y theo duration
  const adjustItinerary = (itinerary, days) => {
    if (itinerary.length === days) return itinerary;
    
    if (itinerary.length > days) {
      // C·∫Øt b·ªõt ng√†y n·∫øu nhi·ªÅu h∆°n
      return itinerary.slice(0, days);
    } else {
      // Th√™m ng√†y n·∫øu √≠t h∆°n
      const result = [...itinerary];
      const lastDay = itinerary[itinerary.length - 1];
      
      for (let i = itinerary.length + 1; i <= days; i++) {
        result.push({
          day: i,
          title: `Ng√†y ${i}`,
          activities: [
            { time: '07:00', description: 'ƒÇn s√°ng t·∫°i kh√°ch s·∫°n' },
            { time: '09:00', description: 'Tham quan ƒë·ªãa ƒëi·ªÉm du l·ªãch' },
            { time: '12:00', description: 'ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng' },
            { time: '14:00', description: 'Ti·∫øp t·ª•c tham quan' },
            { time: '18:00', description: 'ƒÇn t·ªëi v√† ngh·ªâ ng∆°i' },
          ]
        });
      }
      
      return result;
    }
  };

  const itinerary = adjustItinerary(getItinerary(), duration);
  const [activeKey, setActiveKey] = useState('0');

  return (
    <Card className="shadow-sm mb-4">
      <Card.Header>
        <h5 className="mb-0">üìÖ L·ªãch tr√¨nh chi ti·∫øt ({duration} ng√†y)</h5>
      </Card.Header>
      <Card.Body className="p-0">
        <Accordion activeKey={activeKey} onSelect={(key) => setActiveKey(key)}>
          {itinerary.map((day, index) => (
            <Accordion.Item key={index} eventKey={index.toString()}>
              <Accordion.Header>
                <div className="d-flex align-items-center w-100">
                  <Badge bg="primary" className="me-2">Ng√†y {day.day}</Badge>
                  <span className="fw-bold">{day.title}</span>
                </div>
              </Accordion.Header>
              <Accordion.Body className="p-0">
                <ListGroup variant="flush">
                  {day.activities.map((activity, actIndex) => (
                    <ListGroup.Item key={actIndex} className="d-flex">
                      <div className="text-primary fw-bold" style={{ width: '80px' }}>
                        {activity.time}
                      </div>
                      <div>{activity.description}</div>
                    </ListGroup.Item>
                  ))}
                </ListGroup>
              </Accordion.Body>
            </Accordion.Item>
          ))}
        </Accordion>
      </Card.Body>
      <Card.Footer className="bg-white">
        <small className="text-muted">
          * L·ªãch tr√¨nh c√≥ th·ªÉ thay ƒë·ªïi t√πy theo ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt v√† t√¨nh h√¨nh th·ª±c t·∫ø
        </small>
      </Card.Footer>
    </Card>
  );
};

export default TourItinerary; 